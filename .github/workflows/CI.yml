name: CI

on: 
  push:
  pull_request:
  schedule:
    - cron: 0 0 * * *

jobs:
  format:
    runs-on: ubuntu-18.04
    
    steps:
      - uses: actions/checkout@v1
      - uses: Geode-solutions/actions/clang-format@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
      
  build-ubuntu:
    runs-on: ubuntu-18.04
    needs: format
    strategy:
      matrix:
        cc: [gcc, clang]
        cxx: [g++, clang++]
        exclude:
          - cc: gcc
            cxx: clang++
          - cc: clang
            cxx: g++

    steps:
    - uses: actions/checkout@v1
    - uses: Geode-solutions/actions/get-release@master
      id: opengeode
      with:
        repository: OpenGeode
        file: '-Linux.tar.gz'
    - name: Compile
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH:PATH=${{ steps.opengeode.outputs.path }} ..
        cmake --build . -- -j2
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
    - name: Test
      run: |
        mkdir -p test
        cd test
        cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH:PATH="$GITHUB_WORKSPACE/build/opengeodeio/install;${{ steps.opengeode.outputs.path }}" ../tests
        cmake --build . -- -j2
        ctest --output-on-failure
    - name: Kcov
      run: curl -s https://raw.githubusercontent.com/Geode-solutions/actions/master/kcov.sh | bash -s -- ${GITHUB_WORKSPACE}/build/opengeodeio/bin
      if: matrix.cc == 'gcc' && github.event_name == 'pull_request'
    - uses: codecov/codecov-action@v1.0.2
      if: matrix.cc == 'gcc' && github.event_name == 'pull_request'
      with: 
        token: ${{ secrets.CODECOV_TOKEN }}
        file: kcov/kcov-merged/cobertura.xml
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: pullreminders/slack-action@master
      with:
        args: '{\"channel\":\"CLFD0SSG4\",\"text\":\"Compilation or Testing failed for OpenGeode-IO on Ubuntu\"}'        
      
  build-mac:
    runs-on: macOS-10.14
    needs: format
    strategy:
      matrix:
        cmake_args: ['-DCMAKE_BUILD_TYPE=Debug', '-G "Xcode"']

    steps:
    - uses: actions/checkout@v1
    - uses: Geode-solutions/actions/get-release@master
      id: opengeode
      with:
        repository: OpenGeode
        file: '-Darwin.tar.gz'
    - name: Compile & Test
      run: |
        mkdir -p build
        cd build
        cmake ${{ matrix.cmake_args }} -DCMAKE_PREFIX_PATH:PATH=${{ steps.opengeode.outputs.path }} ..
        cmake --build . --config Debug
        cd opengeodeio
        ctest -C Debug --output-on-failure
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: pullreminders/slack-action@master
      with:
        args: '{\"channel\":\"CLFD0SSG4\",\"text\":\"Compilation or Testing failed for OpenGeode-IO on macOS\"}' 

  build-windows:
    runs-on: windows-2016
    needs: format

    steps:
    - uses: actions/checkout@v1
    - uses: Geode-solutions/actions/get-release@master
      id: opengeode
      with:
        repository: OpenGeode
        file: '-win64.zip'
    - name: Compile & Test
      run: |
        mkdir -p build
        cd build
        cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_PREFIX_PATH:PATH=${{ steps.opengeode.outputs.path }} ..
        cmake --build . --config Debug
        cd opengeodeio
        ctest -C Debug --output-on-failure
    - name: Notify slack
      if: failure() && github.ref == 'refs/heads/master'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: pullreminders/slack-action@master
      with:
        args: '{\"channel\":\"CLFD0SSG4\",\"text\":\"Compilation or Testing failed for OpenGeode-IO on Windows\"}' 
        
  semantic-release:
    runs-on: ubuntu-18.04
    needs: [build-ubuntu, build-mac, build-windows]
    steps:
    - uses: actions/checkout@v1
    - run: npx semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
 
